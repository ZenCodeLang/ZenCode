package org.openzen.zenscript.codemodel.type.builtin;

import org.openzen.zenscript.codemodel.FunctionHeader;
import org.openzen.zenscript.codemodel.constant.CompileTimeConstant;
import org.openzen.zenscript.codemodel.constant.StringConstant;
import org.openzen.zenscript.codemodel.identifiers.DefinitionSymbol;
import org.openzen.zenscript.codemodel.identifiers.MethodSymbol;
import org.openzen.zenscript.codemodel.type.*;

import java.util.Optional;

import static org.openzen.zenscript.codemodel.type.BasicTypeID.*;

public enum BuiltinMethodSymbol implements MethodSymbol {
	BOOL_NOT(BOOL, "!", BOOL, BOOL),
	BOOL_AND(BOOL, "&", BOOL, BOOL, BOOL),
	BOOL_OR(BOOL, "|", BOOL, BOOL, BOOL),
	BOOL_XOR(BOOL, "^", BOOL, BOOL, BOOL),
	BOOL_EQUALS(BOOL, "==", BOOL, BOOL, BOOL),
	BOOL_NOTEQUALS(BOOL, "!=", BOOL, BOOL, BOOL),
	BOOL_TO_STRING(BOOL, "as string", STRING, BOOL),
	BOOL_PARSE(BOOL, "parse", BOOL, STRING),

	BYTE_NOT(BYTE, "~", BYTE, BYTE),
	BYTE_INC(BYTE, "++", BYTE, BYTE),
	BYTE_DEC(BYTE, "--", BYTE, BYTE),
	BYTE_ADD_BYTE(BYTE, "+", BYTE, BYTE, BYTE),
	BYTE_SUB_BYTE(BYTE, "-", BYTE, BYTE, BYTE),
	BYTE_MUL_BYTE(BYTE, "*", BYTE, BYTE, BYTE),
	BYTE_DIV_BYTE(BYTE, "/", BYTE, BYTE, BYTE),
	BYTE_MOD_BYTE(BYTE, "%", BYTE, BYTE, BYTE),
	BYTE_AND_BYTE(BYTE, "&", BYTE, BYTE, BYTE),
	BYTE_OR_BYTE(BYTE, "|", BYTE, BYTE, BYTE),
	BYTE_XOR_BYTE(BYTE, "^", BYTE, BYTE, BYTE),
	BYTE_SHL(BYTE, "<<", BYTE, BYTE, BYTE),
	BYTE_SHR(BYTE, ">>", BYTE, BYTE, BYTE),
	BYTE_COMPARE(BYTE, "compare", INT, BYTE, BYTE),
	BYTE_TO_SBYTE(BYTE, "as sbyte", SBYTE, BYTE),
	BYTE_TO_SHORT(BYTE, "as short", SHORT, BYTE),
	BYTE_TO_USHORT(BYTE, "as ushort", USHORT, BYTE),
	BYTE_TO_INT(BYTE, "as int", INT, BYTE),
	BYTE_TO_UINT(BYTE, "as uint", UINT, BYTE),
	BYTE_TO_LONG(BYTE, "as long", LONG, BYTE),
	BYTE_TO_ULONG(BYTE, "as ulong", ULONG, BYTE),
	BYTE_TO_USIZE(BYTE, "as usize", USIZE, BYTE),
	BYTE_TO_FLOAT(BYTE, "as float", FLOAT, BYTE),
	BYTE_TO_DOUBLE(BYTE, "as double", DOUBLE, BYTE),
	BYTE_TO_CHAR(BYTE, "as char", CHAR, BYTE),
	BYTE_TO_STRING(BYTE, "as string", STRING, BYTE),
	BYTE_PARSE(BYTE, "parse", BYTE, STRING),
	BYTE_PARSE_WITH_BASE(BYTE, "parse", BYTE, STRING, INT),
	BYTE_GET_MIN_VALUE(BYTE, "MIN_VALUE", BYTE),
	BYTE_GET_MAX_VALUE(BYTE, "MAX_VALUE", BYTE),



	SBYTE_NOT(SBYTE, "~", SBYTE, SBYTE),
	SBYTE_NEG(SBYTE, "-", SBYTE, SBYTE),
	SBYTE_INC(SBYTE, "++", SBYTE, SBYTE),
	SBYTE_DEC(SBYTE, "--", SBYTE, SBYTE),
	SBYTE_ADD_SBYTE(SBYTE, "+", SBYTE, SBYTE),
	SBYTE_SUB_SBYTE(SBYTE, "-", SBYTE, SBYTE),
	SBYTE_MUL_SBYTE(SBYTE, "*", SBYTE, SBYTE),
	SBYTE_DIV_SBYTE(SBYTE, "/", SBYTE, SBYTE),
	SBYTE_MOD_SBYTE(SBYTE, "%", SBYTE, SBYTE),
	SBYTE_AND_SBYTE(SBYTE, "&", SBYTE, SBYTE),
	SBYTE_OR_SBYTE(SBYTE, "|", SBYTE, SBYTE),
	SBYTE_XOR_SBYTE(SBYTE, "^", SBYTE, SBYTE),
	SBYTE_SHL(SBYTE, "<<", SBYTE, SBYTE),
	SBYTE_SHR(SBYTE, ">>", SBYTE, SBYTE),
	SBYTE_USHR(SBYTE, ">>>", SBYTE, SBYTE),
	SBYTE_COMPARE(SBYTE, "compare", INT, SBYTE),
	SBYTE_TO_BYTE(SBYTE, "as byte", BYTE, SBYTE),
	SBYTE_TO_SHORT(SBYTE, "as short", SHORT, SBYTE),
	SBYTE_TO_USHORT(SBYTE, "as ushort", USHORT, SBYTE),
	SBYTE_TO_INT(SBYTE, "as int", INT, SBYTE),
	SBYTE_TO_UINT(SBYTE, "as uint", UINT, SBYTE),
	SBYTE_TO_LONG(SBYTE, "as long", LONG, SBYTE),
	SBYTE_TO_ULONG(SBYTE, "as ulong", ULONG, SBYTE),
	SBYTE_TO_USIZE(SBYTE, "as usize", USIZE, SBYTE),
	SBYTE_TO_FLOAT(SBYTE, "as float", FLOAT, SBYTE),
	SBYTE_TO_DOUBLE(SBYTE, "as double", DOUBLE, SBYTE),
	SBYTE_TO_CHAR(SBYTE, "as char", CHAR, SBYTE),
	SBYTE_TO_STRING(SBYTE, "as string", STRING, SBYTE),
	SBYTE_PARSE(SBYTE, "parse", SBYTE, STRING, INT),
	SBYTE_PARSE_WITH_BASE(SBYTE, "parse", SBYTE, STRING, INT),
	SBYTE_GET_MIN_VALUE(SBYTE, "MIN_VALUE", SBYTE),
	SBYTE_GET_MAX_VALUE(SBYTE, "MAX_VALUE", SBYTE),

	SHORT_NOT(SHORT, "~", SHORT, SHORT),
	SHORT_NEG(SHORT, "-", SHORT, SHORT),
	SHORT_INC(SHORT, "++", SHORT, SHORT),
	SHORT_DEC(SHORT, "--", SHORT, SHORT),
	SHORT_ADD_SHORT(SHORT, "+", SHORT, SHORT),
	SHORT_SUB_SHORT(SHORT, "-", SHORT, SHORT),
	SHORT_MUL_SHORT(SHORT, "*", SHORT, SHORT),
	SHORT_DIV_SHORT(SHORT, "/", SHORT, SHORT),
	SHORT_MOD_SHORT(SHORT, "%", SHORT, SHORT),
	SHORT_AND_SHORT(SHORT, "&", SHORT, SHORT),
	SHORT_OR_SHORT(SHORT, "|", SHORT, SHORT),
	SHORT_XOR_SHORT(SHORT, "^", SHORT, SHORT),
	SHORT_SHL(SHORT, "<<", SHORT, SHORT),
	SHORT_SHR(SHORT, ">>", SHORT, SHORT),
	SHORT_USHR(SHORT, ">>>", SHORT, SHORT),
	SHORT_COMPARE(SHORT, "compare", INT, SHORT),
	SHORT_TO_BYTE(SHORT, "as byte", BYTE, SHORT),
	SHORT_TO_SBYTE(SHORT, "as sbyte", SBYTE, SHORT),
	SHORT_TO_USHORT(SHORT, "as ushort", USHORT, SHORT),
	SHORT_TO_INT(SHORT, "as int", INT, SHORT),
	SHORT_TO_UINT(SHORT, "as uint", UINT, SHORT),
	SHORT_TO_LONG(SHORT, "as long", LONG, SHORT),
	SHORT_TO_ULONG(SHORT, "as ulong", ULONG, SHORT),
	SHORT_TO_USIZE(SHORT, "as usize", USIZE, SHORT),
	SHORT_TO_FLOAT(SHORT, "as float", FLOAT, SHORT),
	SHORT_TO_DOUBLE(SHORT, "as double", DOUBLE, SHORT),
	SHORT_TO_CHAR(SHORT, "as char", CHAR, SHORT),
	SHORT_TO_STRING(SHORT, "as string", STRING, SHORT),
	SHORT_PARSE(SHORT, "parse", SHORT, STRING, INT),
	SHORT_PARSE_WITH_BASE(SHORT, "parse", SHORT, STRING, INT),
	SHORT_GET_MIN_VALUE(SHORT, "MIN_VALUE", SHORT),
	SHORT_GET_MAX_VALUE(SHORT, "MAX_VALUE", SHORT),

	USHORT_NOT(USHORT, "~", USHORT, USHORT),
	USHORT_INC(USHORT, "++", USHORT, USHORT),
	USHORT_DEC(USHORT, "--", USHORT, USHORT),
	USHORT_ADD_USHORT(USHORT, "+", USHORT, USHORT),
	USHORT_SUB_USHORT(USHORT, "-", USHORT, USHORT),
	USHORT_MUL_USHORT(USHORT, "*", USHORT, USHORT),
	USHORT_DIV_USHORT(USHORT, "/", USHORT, USHORT),
	USHORT_MOD_USHORT(USHORT, "%", USHORT, USHORT),
	USHORT_AND_USHORT(USHORT, "&", USHORT, USHORT),
	USHORT_OR_USHORT(USHORT, "|", USHORT, USHORT),
	USHORT_XOR_USHORT(USHORT, "^", USHORT, USHORT),
	USHORT_SHL(USHORT, "<<", USHORT, USHORT),
	USHORT_SHR(USHORT, ">>", USHORT, USHORT),
	USHORT_COMPARE(USHORT, "compare", INT, USHORT),
	USHORT_TO_BYTE(USHORT, "as byte", BYTE, USHORT),
	USHORT_TO_SBYTE(USHORT, "as sbyte", SBYTE, USHORT),
	USHORT_TO_SHORT(USHORT, "as short", SHORT, USHORT),
	USHORT_TO_INT(USHORT, "as int", INT, USHORT),
	USHORT_TO_UINT(USHORT, "as uint", UINT, USHORT),
	USHORT_TO_LONG(USHORT, "as long", LONG, USHORT),
	USHORT_TO_ULONG(USHORT, "as ulong", ULONG, USHORT),
	USHORT_TO_USIZE(USHORT, "as usize", USIZE, USHORT),
	USHORT_TO_FLOAT(USHORT, "as float", FLOAT, USHORT),
	USHORT_TO_DOUBLE(USHORT, "as double", DOUBLE, USHORT),
	USHORT_TO_CHAR(USHORT, "as char", CHAR, USHORT),
	USHORT_TO_STRING(USHORT, "as string", STRING, USHORT),
	USHORT_PARSE(USHORT, "parse", USHORT, STRING, INT),
	USHORT_PARSE_WITH_BASE(USHORT, "parse", USHORT, STRING, INT),
	USHORT_GET_MIN_VALUE(USHORT, "MIN_VALUE", USHORT),
	USHORT_GET_MAX_VALUE(USHORT, "MAX_VALUE", USHORT),
/*
	INT_NOT,
	INT_NEG,
	INT_INC,
	INT_DEC,
	INT_ADD_INT,
	INT_ADD_USIZE,
	INT_SUB_INT,
	INT_MUL_INT,
	INT_DIV_INT,
	INT_MOD_INT,
	INT_AND_INT,
	INT_OR_INT,
	INT_XOR_INT,
	INT_SHL,
	INT_SHR,
	INT_USHR,
	INT_COMPARE,
	INT_TO_BYTE,
	INT_TO_SBYTE,
	INT_TO_SHORT,
	INT_TO_USHORT,
	INT_TO_UINT,
	INT_TO_LONG,
	INT_TO_ULONG,
	INT_TO_USIZE,
	INT_TO_FLOAT,
	INT_TO_DOUBLE,
	INT_TO_CHAR,
	INT_TO_STRING,
	INT_PARSE,
	INT_PARSE_WITH_BASE,
	INT_GET_MIN_VALUE,
	INT_GET_MAX_VALUE,
	INT_COUNT_LOW_ZEROES,
	INT_COUNT_HIGH_ZEROES,
	INT_COUNT_LOW_ONES,
	INT_COUNT_HIGH_ONES,
	INT_HIGHEST_ONE_BIT,
	INT_LOWEST_ONE_BIT,
	INT_HIGHEST_ZERO_BIT,
	INT_LOWEST_ZERO_BIT,
	INT_BIT_COUNT,

	UINT_NOT,
	UINT_INC,
	UINT_DEC,
	UINT_ADD_UINT,
	UINT_SUB_UINT,
	UINT_MUL_UINT,
	UINT_DIV_UINT,
	UINT_MOD_UINT,
	UINT_AND_UINT,
	UINT_OR_UINT,
	UINT_XOR_UINT,
	UINT_SHL,
	UINT_SHR,
	UINT_COMPARE,
	UINT_TO_BYTE,
	UINT_TO_SBYTE,
	UINT_TO_SHORT,
	UINT_TO_USHORT,
	UINT_TO_INT,
	UINT_TO_LONG,
	UINT_TO_ULONG,
	UINT_TO_USIZE,
	UINT_TO_FLOAT,
	UINT_TO_DOUBLE,
	UINT_TO_CHAR,
	UINT_TO_STRING,
	UINT_PARSE,
	UINT_PARSE_WITH_BASE,
	UINT_GET_MIN_VALUE,
	UINT_GET_MAX_VALUE,
	UINT_COUNT_LOW_ZEROES,
	UINT_COUNT_HIGH_ZEROES,
	UINT_COUNT_LOW_ONES,
	UINT_COUNT_HIGH_ONES,
	UINT_HIGHEST_ONE_BIT,
	UINT_LOWEST_ONE_BIT,
	UINT_HIGHEST_ZERO_BIT,
	UINT_LOWEST_ZERO_BIT,
	UINT_BIT_COUNT,

	LONG_NOT,
	LONG_NEG,
	LONG_INC,
	LONG_DEC,
	LONG_ADD_LONG,
	LONG_SUB_LONG,
	LONG_MUL_LONG,
	LONG_DIV_LONG,
	LONG_MOD_LONG,
	LONG_AND_LONG,
	LONG_OR_LONG,
	LONG_XOR_LONG,
	LONG_SHL,
	LONG_SHR,
	LONG_USHR,
	LONG_COMPARE,
	LONG_COMPARE_INT,
	LONG_TO_BYTE,
	LONG_TO_SBYTE,
	LONG_TO_SHORT,
	LONG_TO_USHORT,
	LONG_TO_INT,
	LONG_TO_UINT,
	LONG_TO_ULONG,
	LONG_TO_USIZE,
	LONG_TO_FLOAT,
	LONG_TO_DOUBLE,
	LONG_TO_CHAR,
	LONG_TO_STRING,
	LONG_PARSE,
	LONG_PARSE_WITH_BASE,
	LONG_GET_MIN_VALUE,
	LONG_GET_MAX_VALUE,
	LONG_COUNT_LOW_ZEROES,
	LONG_COUNT_HIGH_ZEROES,
	LONG_COUNT_LOW_ONES,
	LONG_COUNT_HIGH_ONES,
	LONG_HIGHEST_ONE_BIT,
	LONG_LOWEST_ONE_BIT,
	LONG_HIGHEST_ZERO_BIT,
	LONG_LOWEST_ZERO_BIT,
	LONG_BIT_COUNT,

	ULONG_NOT,
	ULONG_INC,
	ULONG_DEC,
	ULONG_ADD_ULONG,
	ULONG_SUB_ULONG,
	ULONG_MUL_ULONG,
	ULONG_DIV_ULONG,
	ULONG_MOD_ULONG,
	ULONG_AND_ULONG,
	ULONG_OR_ULONG,
	ULONG_XOR_ULONG,
	ULONG_SHL,
	ULONG_SHR,
	ULONG_COMPARE,
	ULONG_COMPARE_UINT,
	ULONG_COMPARE_USIZE,
	ULONG_TO_BYTE,
	ULONG_TO_SBYTE,
	ULONG_TO_SHORT,
	ULONG_TO_USHORT,
	ULONG_TO_INT,
	ULONG_TO_UINT,
	ULONG_TO_LONG,
	ULONG_TO_USIZE,
	ULONG_TO_FLOAT,
	ULONG_TO_DOUBLE,
	ULONG_TO_CHAR,
	ULONG_TO_STRING,
	ULONG_PARSE,
	ULONG_PARSE_WITH_BASE,
	ULONG_GET_MIN_VALUE,
	ULONG_GET_MAX_VALUE,
	ULONG_COUNT_LOW_ZEROES,
	ULONG_COUNT_HIGH_ZEROES,
	ULONG_COUNT_LOW_ONES,
	ULONG_COUNT_HIGH_ONES,
	ULONG_HIGHEST_ONE_BIT,
	ULONG_LOWEST_ONE_BIT,
	ULONG_HIGHEST_ZERO_BIT,
	ULONG_LOWEST_ZERO_BIT,
	ULONG_BIT_COUNT,

	USIZE_NOT,
	USIZE_INC,
	USIZE_DEC,
	USIZE_ADD_USIZE,
	USIZE_SUB_USIZE,
	USIZE_MUL_USIZE,
	USIZE_DIV_USIZE,
	USIZE_MOD_USIZE,
	USIZE_AND_USIZE,
	USIZE_OR_USIZE,
	USIZE_XOR_USIZE,
	USIZE_SHL,
	USIZE_SHR,
	USIZE_COMPARE,
	USIZE_COMPARE_UINT,
	USIZE_TO_BYTE,
	USIZE_TO_SBYTE,
	USIZE_TO_SHORT,
	USIZE_TO_USHORT,
	USIZE_TO_INT,
	USIZE_TO_UINT,
	USIZE_TO_LONG,
	USIZE_TO_ULONG,
	USIZE_TO_FLOAT,
	USIZE_TO_DOUBLE,
	USIZE_TO_CHAR,
	USIZE_TO_STRING,
	USIZE_PARSE,
	USIZE_PARSE_WITH_BASE,
	USIZE_GET_MIN_VALUE,
	USIZE_GET_MAX_VALUE,
	USIZE_COUNT_LOW_ZEROES,
	USIZE_COUNT_HIGH_ZEROES,
	USIZE_COUNT_LOW_ONES,
	USIZE_COUNT_HIGH_ONES,
	USIZE_HIGHEST_ONE_BIT,
	USIZE_LOWEST_ONE_BIT,
	USIZE_HIGHEST_ZERO_BIT,
	USIZE_LOWEST_ZERO_BIT,
	USIZE_BIT_COUNT,
	USIZE_BITS,

	FLOAT_NEG,
	FLOAT_INC,
	FLOAT_DEC,
	FLOAT_ADD_FLOAT,
	FLOAT_SUB_FLOAT,
	FLOAT_MUL_FLOAT,
	FLOAT_DIV_FLOAT,
	FLOAT_MOD_FLOAT,
	FLOAT_COMPARE,
	FLOAT_TO_BYTE,
	FLOAT_TO_SBYTE,
	FLOAT_TO_SHORT,
	FLOAT_TO_USHORT,
	FLOAT_TO_INT,
	FLOAT_TO_UINT,
	FLOAT_TO_LONG,
	FLOAT_TO_ULONG,
	FLOAT_TO_USIZE,
	FLOAT_TO_DOUBLE,
	FLOAT_TO_STRING,
	FLOAT_BITS,
	FLOAT_FROM_BITS,
	FLOAT_PARSE,
	FLOAT_GET_MIN_VALUE,
	FLOAT_GET_MAX_VALUE,

	DOUBLE_NEG,
	DOUBLE_INC,
	DOUBLE_DEC,
	DOUBLE_ADD_DOUBLE,
	DOUBLE_SUB_DOUBLE,
	DOUBLE_MUL_DOUBLE,
	DOUBLE_DIV_DOUBLE,
	DOUBLE_MOD_DOUBLE,
	DOUBLE_COMPARE,
	DOUBLE_TO_BYTE,
	DOUBLE_TO_SBYTE,
	DOUBLE_TO_SHORT,
	DOUBLE_TO_USHORT,
	DOUBLE_TO_INT,
	DOUBLE_TO_UINT,
	DOUBLE_TO_LONG,
	DOUBLE_TO_ULONG,
	DOUBLE_TO_USIZE,
	DOUBLE_TO_FLOAT,
	DOUBLE_TO_STRING,
	DOUBLE_BITS,
	DOUBLE_FROM_BITS,
	DOUBLE_PARSE,
	DOUBLE_GET_MIN_VALUE,
	DOUBLE_GET_MAX_VALUE,

	CHAR_ADD_INT,
	CHAR_SUB_INT,
	CHAR_SUB_CHAR,
	CHAR_COMPARE,
	CHAR_TO_BYTE,
	CHAR_TO_SBYTE,
	CHAR_TO_SHORT,
	CHAR_TO_USHORT,
	CHAR_TO_INT,
	CHAR_TO_UINT,
	CHAR_TO_LONG,
	CHAR_TO_ULONG,
	CHAR_TO_USIZE,
	CHAR_TO_STRING,
	CHAR_GET_MIN_VALUE,
	CHAR_GET_MAX_VALUE,
	CHAR_REMOVE_DIACRITICS,
	CHAR_TO_LOWER_CASE,
	CHAR_TO_UPPER_CASE,*/

	STRING_CONSTRUCTOR_CHARACTERS(STRING, "this", STRING, ArrayTypeID.CHAR),
	STRING_ADD_STRING(STRING, "+", STRING, STRING) {
		@Override
		public Optional<CompileTimeConstant> evaluate(TypeID[] typeArguments, CompileTimeConstant[] arguments) {
			Optional<String> a = arguments[0].asString().map(s -> s.value);
			Optional<String> b = arguments[1].asString().map(s -> s.value);
			if (a.isPresent() && b.isPresent()) {
				return Optional.of(new StringConstant(a.get() + b.get()));
			} else {
				return Optional.empty();
			}
		}
	},
	STRING_COMPARE(STRING, "compare", INT, STRING),
	STRING_LENGTH(STRING, "length", USIZE),
	STRING_INDEXGET(STRING, "[]", CHAR, USIZE),
	STRING_RANGEGET(STRING, "[..]", STRING, RangeTypeID.USIZE),
	STRING_CHARACTERS(STRING, "characters", ArrayTypeID.CHAR),
	STRING_ISEMPTY(STRING, "isEmpty", BOOL),
	STRING_REMOVE_DIACRITICS(STRING, "removeDiacritics", STRING),
	STRING_TRIM(STRING, "trim", STRING),
	STRING_TO_LOWER_CASE(STRING, "toLowerCase", STRING),
	STRING_TO_UPPER_CASE(STRING, "toUpperCase", STRING),
	STRING_CONTAINS_CHAR(STRING, "contains", BOOL, CHAR),
	STRING_CONTAINS_STRING(STRING, "contains", BOOL, STRING),

	ASSOC_CONSTRUCTOR(MapTypeSymbol.INSTANCE, "this", new AssocTypeID(MapTypeSymbol.KEY_TYPE, MapTypeSymbol.VALUE_TYPE)),
	ASSOC_INDEXGET(MapTypeSymbol.INSTANCE, "[]", new OptionalTypeID(MapTypeSymbol.VALUE_TYPE), MapTypeSymbol.KEY_TYPE),
	ASSOC_INDEXSET(MapTypeSymbol.INSTANCE, "[]=", VOID, MapTypeSymbol.KEY_TYPE, MapTypeSymbol.VALUE_TYPE),
	ASSOC_CONTAINS(MapTypeSymbol.INSTANCE, "in", BOOL, MapTypeSymbol.KEY_TYPE),
	ASSOC_GETORDEFAULT(MapTypeSymbol.INSTANCE, "getOrDefault", MapTypeSymbol.VALUE_TYPE, MapTypeSymbol.KEY_TYPE, MapTypeSymbol.VALUE_TYPE),
	ASSOC_SIZE(MapTypeSymbol.INSTANCE, "size", USIZE),
	ASSOC_ISEMPTY(MapTypeSymbol.INSTANCE, "isEmpty", BOOL),
	ASSOC_KEYS(MapTypeSymbol.INSTANCE, "keys", new ArrayTypeID(MapTypeSymbol.KEY_TYPE)),
	ASSOC_VALUES(MapTypeSymbol.INSTANCE, "values", new ArrayTypeID(MapTypeSymbol.VALUE_TYPE)),
	ASSOC_HASHCODE(MapTypeSymbol.INSTANCE, "objectHashCode", UINT),
	ASSOC_EQUALS(MapTypeSymbol.INSTANCE, "==", new AssocTypeID(MapTypeSymbol.KEY_TYPE, MapTypeSymbol.VALUE_TYPE)),
	ASSOC_NOTEQUALS(MapTypeSymbol.INSTANCE, "!=", new AssocTypeID(MapTypeSymbol.KEY_TYPE, MapTypeSymbol.VALUE_TYPE)),
	ASSOC_SAME(MapTypeSymbol.INSTANCE, "===", new AssocTypeID(MapTypeSymbol.KEY_TYPE, MapTypeSymbol.VALUE_TYPE)),
	ASSOC_NOTSAME(MapTypeSymbol.INSTANCE, "!==", new AssocTypeID(MapTypeSymbol.KEY_TYPE, MapTypeSymbol.VALUE_TYPE)),

/*	GENERICMAP_CONSTRUCTOR,
	GENERICMAP_GETOPTIONAL,
	GENERICMAP_PUT,
	GENERICMAP_CONTAINS,
	GENERICMAP_ADDALL,
	GENERICMAP_SIZE,
	GENERICMAP_ISEMPTY,
	GENERICMAP_HASHCODE,
	GENERICMAP_SAME,
	GENERICMAP_NOTSAME,*/

	ARRAY_CONSTRUCTOR_SIZED(ArrayTypeSymbol.ARRAY, "this", FunctionHeader.PLACEHOLDER),
	ARRAY_CONSTRUCTOR_INITIAL_VALUE(ArrayTypeSymbol.ARRAY, "this", FunctionHeader.PLACEHOLDER),
	ARRAY_CONSTRUCTOR_LAMBDA(ArrayTypeSymbol.ARRAY, "this", FunctionHeader.PLACEHOLDER),
	ARRAY_CONSTRUCTOR_PROJECTED(ArrayTypeSymbol.ARRAY, "this", FunctionHeader.PLACEHOLDER),
	ARRAY_CONSTRUCTOR_PROJECTED_INDEXED(ArrayTypeSymbol.ARRAY, "this", FunctionHeader.PLACEHOLDER),
	ARRAY_INDEXGET(ArrayTypeSymbol.ARRAY, "[]", FunctionHeader.PLACEHOLDER),
	ARRAY_INDEXSET(ArrayTypeSymbol.ARRAY, "[]=", FunctionHeader.PLACEHOLDER),
	// 1D arrays only
	ARRAY_INDEXGETRANGE(ArrayTypeSymbol.ARRAY, "[..]", new RangeTypeID(ArrayTypeSymbol.ELEMENT_TYPE)),
	ARRAY_CONTAINS(ArrayTypeSymbol.ARRAY, "in", BOOL, ArrayTypeSymbol.ELEMENT_TYPE),
	ARRAY_LENGTH1D(ArrayTypeSymbol.ARRAY, "length", USIZE),
	ARRAY_LENGTHMD(ArrayTypeSymbol.ARRAY, "length", new ArrayTypeID(USIZE, 1)),
	ARRAY_ISEMPTY(ArrayTypeSymbol.ARRAY, "isEmpty", BOOL),
	ARRAY_HASHCODE(ArrayTypeSymbol.ARRAY, "hashCode", UINT),
	ARRAY_EQUALS(ArrayTypeSymbol.ARRAY, "==", FunctionHeader.PLACEHOLDER),
	ARRAY_NOTEQUALS(ArrayTypeSymbol.ARRAY, "!=", FunctionHeader.PLACEHOLDER),
	ARRAY_SAME(ArrayTypeSymbol.ARRAY, "===", FunctionHeader.PLACEHOLDER),
	ARRAY_NOTSAME(ArrayTypeSymbol.ARRAY, "!==", FunctionHeader.PLACEHOLDER),

	SBYTE_ARRAY_AS_BYTE_ARRAY(ArrayTypeSymbol.ARRAY, "as byte[]", ArrayTypeID.BYTE),
	BYTE_ARRAY_AS_SBYTE_ARRAY(ArrayTypeSymbol.ARRAY, "as sbyte[]", ArrayTypeID.SBYTE),
	SHORT_ARRAY_AS_USHORT_ARRAY(ArrayTypeSymbol.ARRAY, "as ushort[]", ArrayTypeID.USHORT),
	USHORT_ARRAY_AS_SHORT_ARRAY(ArrayTypeSymbol.ARRAY, "as short[]", ArrayTypeID.SHORT),
	INT_ARRAY_AS_UINT_ARRAY(ArrayTypeSymbol.ARRAY, "as uint[]", ArrayTypeID.UINT),
	UINT_ARRAY_AS_INT_ARRAY(ArrayTypeSymbol.ARRAY, "as int[]", ArrayTypeID.INT),
	LONG_ARRAY_AS_ULONG_ARRAY(ArrayTypeSymbol.ARRAY, "as ulong[]", ArrayTypeID.ULONG),
	ULONG_ARRAY_AS_LONG_ARRAY(ArrayTypeSymbol.ARRAY, "as long[]", ArrayTypeID.LONG),

	FUNCTION_CALL(FunctionTypeSymbol.PLACEHOLDER, "()", FunctionHeader.PLACEHOLDER),
	FUNCTION_SAME(FunctionTypeSymbol.PLACEHOLDER, "===", FunctionHeader.PLACEHOLDER),
	FUNCTION_NOTSAME(FunctionTypeSymbol.PLACEHOLDER, "!==", FunctionHeader.PLACEHOLDER),

	CLASS_DEFAULT_CONSTRUCTOR,
	STRUCT_EMPTY_CONSTRUCTOR,
	STRUCT_VALUE_CONSTRUCTOR,
	ENUM_EMPTY_CONSTRUCTOR,
	ENUM_NAME,
	ENUM_ORDINAL,
	ENUM_VALUES,
	ENUM_TO_STRING,
	ENUM_COMPARE,

	OBJECT_HASHCODE,
	OBJECT_SAME,
	OBJECT_NOTSAME,

	RANGE_FROM(RangeTypeSymbol.INSTANCE, "from", new GenericTypeID(RangeTypeSymbol.PARAMETER)),
	RANGE_TO(RangeTypeSymbol.INSTANCE, "to", new GenericTypeID(RangeTypeSymbol.PARAMETER)),

/*	OPTIONAL_IS_NULL,
	OPTIONAL_IS_NOT_NULL,*/

	ITERATOR_INT_RANGE(RangeTypeSymbol.INSTANCE, "iterator", FunctionHeader.PLACEHOLDER),
	ITERATOR_ARRAY_VALUES(ArrayTypeSymbol.ARRAY, "iterator", FunctionHeader.PLACEHOLDER),
	ITERATOR_ARRAY_KEY_VALUES(ArrayTypeSymbol.ARRAY, "iterator", FunctionHeader.PLACEHOLDER),
	ITERATOR_ASSOC_KEYS(MapTypeSymbol.INSTANCE, "iterator", FunctionHeader.PLACEHOLDER),
	ITERATOR_ASSOC_KEY_VALUES(MapTypeSymbol.INSTANCE, "iterator", FunctionHeader.PLACEHOLDER),
	ITERATOR_STRING_CHARS(STRING, "iterator", FunctionHeader.PLACEHOLDER),
	/*ITERATOR_ITERABLE()*/;

	private final DefinitionSymbol definingType;
	private final String name;
	private final FunctionHeader header;

	BuiltinMethodSymbol(DefinitionSymbol definingType, String name, FunctionHeader header) {
		this.definingType = definingType;
		this.name = name;
		this.header = header;
	}

	BuiltinMethodSymbol(DefinitionSymbol definingType, String name, TypeID result, TypeID... parameters) {
		this.definingType = definingType;
		this.name = name;
		header = new FunctionHeader(result, parameters);
	}

	@Override
	public DefinitionSymbol getDefiningType() {
		return definingType;
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public FunctionHeader getHeader() {
		return header;
	}
}
